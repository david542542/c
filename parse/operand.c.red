//operand.c#include"common.h"#include"operand.h"//Operandvoidprint_operand(constOperand*operand);voiddelete_operand(Operand*operand);voiddelete_operand(Operand*operand){free(operand);}voidprint_operand(constOperand*operand){switch(operand->type){caseVariableType:printf("VARIABLE('%c')",operand->variable.value);break;caseConstantType:printf("CONSTANT(%c)",operand->constant.value);break;caseUnaryExpressionType:{printf("UNARY_EXPRESSION(%c,",operand->unary.type->code);//whataboutconsthere?Operand*child=operand->unary.child;child->print(child);putchar(')');break;}caseBinaryExpressionType:{Operand*left,*right;left=operand->binary.left;right=operand->binary.right;printf("BINARY_EXPRESSION(%c,",operand->binary.type->code);left->print(left);putchar(',');putchar('');right->print(right);putchar(')');break;}default:printf("InvalidOperandTypefound:%d\n",operand->type);exit(EXIT_FAILURE);}}Operand*create_operand_from_value(constOperandTypetype,charvalue){Operand*operand=malloc(sizeof(Operand));operand->type=type;if(operand->type==VariableType)operand->variable.value=value;elseoperand->constant.value=value;operand->delete=delete_operand;operand->print=print_operand;returnoperand;};Operand*create_operand_from_expression(constOperator*operator,Operand*first,Operand*second){Operand*operand=malloc(sizeof(Operand));if(!second){operand->type=UnaryExpressionType;operand->unary.type=operator;operand->unary.child=first;//child}else{operand->type=BinaryExpressionType;operand->binary.type=operator;operand->binary.left=first;//leftoperand->binary.right=second;//right}operand->delete=delete_operand;operand->print=print_operand;returnoperand;};//OperandStackOperand*peek_operand_stack(constOperandStack*stack);voidprint_operand_stack(constOperandStack*stack);boolpush_operand_stack(OperandStack*stack,constOperand*operand);Operand*pop_operand_stack(OperandStack*stack);voiddelete_operand_stack(OperandStack*stack);OperandStack*create_operand_stack(size_tsize,boolis_resizable){OperandStack*stack=malloc(sizeof(OperandStack));stack->is_resizable=is_resizable;stack->max=size;stack->size=0;//functionsstack->top=peek_operand_stack;stack->print=print_operand_stack;stack->push=push_operand_stack;stack->pop=pop_operand_stack;stack->delete=delete_operand_stack;//datastack->data=malloc(size*sizeof(Operand*));returnstack;}voiddelete_operand_stack(OperandStack*stack){free(stack->data);free(stack);}Operand*peek_operand_stack(constOperandStack*stack){if(!stack->size)returnNULL;elsereturnstack->data[stack->size-1];}Operand*pop_operand_stack(OperandStack*stack){if(!stack->size)returnNULL;elsereturnstack->data[--stack->size];}boolpush_operand_stack(OperandStack*stack,constOperand*operand){//Note:wedon'tmodifyOperandandsoitcanbeconst//butinourassignmentwhenpushingittothestack,weneedtoadditasnon-constif(stack->size<stack->max){stack->data[++stack->size-1]=(Operand*)operand;returntrue;}elseif(!stack->is_resizable){returnfalse;}else{//increasebyx2fornowsize_tnew_stack_size=sizeof(Operand*)*stack->size*2;stack->data=realloc(stack->data,new_stack_size);if(!stack->data)returnfalse;stack->data[++stack->size-1]=(Operand*)operand;returntrue;}}voidprint_operand_stack(constOperandStack*stack){printf("Length:%zu|OperandStack:[",stack->size);for(inti=0;i<stack->size;i++){Operand*operand=(Operand*)stack->data[i];if(i!=0)printf(",");operand->print(operand);}putchar(']');}